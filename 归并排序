// 构建有序数据
// 有序数据left、有序数据right
//shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。
Array.prototype.MemeryArray=function(left,right){
		var　result=[];
		while(left.length>0&&right.length>0){
				if(left[0]<right[0]){
						/*shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。*/
						result.push(left.shift());
				}else{
						result.push(right.shift());
				}
		}
				return　result.concat(left).concat(right);
		
};
 //slice返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。
 //请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。
Array.prototype.merge_sort=function(){
		if(this.length==1){
				return this;
		}
		var　middle=Math.floor(this.length/2),
		left=this.slice(0,middle),
		right=this.slice(middle);
		return　this.MemeryArray(left.merge_sort(),right.merge_sort());
};


 
	var a=new Array();
	[].push.apply(a,[16,7,8,20,17,3]);
	var b=new Array();

	//console.log(a.merge_sort(a,0,a.length,b));
	console.log(a.merge_sort());
	console.log(a);


//第二种

function merryArray(a,first,mid,end,tempArr){
		var k=0;m=mid,n=end,f=first;
		while(first<=m&&mid+1<=n){
				if(a[first]<a[mid+1]){
					tempArr[k]=a[first];
					k++;
					first++;
				}
				else{
					tempArr[k]=a[mid+1];
					k++;
					mid++;
				}
		}
		while(first<=m){
					tempArr[k]=a[first];
					k++;
					first++;
		}
		while(mid+1<=n){
					tempArr[k]=a[mid+1];
					k++;
					mid++;
		}
	 for (i = 0; i < k; i++)  
		  a[f + i] = tempArr[i]; 

}
function mergesort(a,first,last,temp){
		if(first<last){
				var mid =Math.floor((first+last)/2); 
				arguments.callee(a, first, mid, temp);
				arguments.callee(a, mid+1, last, temp);
				merryArray(a, first, mid, last, temp);
		}
}
var b=new Array();
var a=new Array();
a.push(16,7,8,20,17,3,44,21,34,56,11,56,4,2,1);
mergesort(a,0,a.length-1,b);
alert(a);
