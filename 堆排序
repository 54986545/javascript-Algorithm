// 面向对象是写法，先构建堆，然后进行排序
// 构建堆时，注意只构建非叶子节点，所以选取的都是(this.length/2)-1
Array.prototype.buildMaxHeap=function(){
		for(var i=Math.floor(this.length/2)-1;i>=0;i--){
				this.heapAdjust(i,this.length);
		}
};
 
Array.prototype.swap=function(i,j){
		var tmp=this[i];
		this[i]=this[j];
		this[j]=tmp;
};
 
Array.prototype.heapSort=function(){
		this.buildMaxHeap();
		for(var i=this.length-1;i>0;i--){
				this.swap(0,i);
				this.heapAdjust(0,i);
		}
 
		return this;
};
 
Array.prototype.heapAdjust=function(i,j){
		var largest=i;
		var left=2*i+1;
		var right=2*i+2;
		 
		if(left<j&&this[largest]<this[left]){
				largest=left;
		}
		 
		if(right<j&&this[largest]<this[right]){
				largest=right;
		}
		 
		if(largest!=i){
				this.swap(i,largest);
				this.heapAdjust(largest,j);
		}
};
 
	var a=new Array();
	[].push.apply(a,[2,3,89,57,23,72,43,105]);
	console.log(a.heapSort());
	
	
//第二种
	<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>jQuery图片轮播(焦点图)插件</title>

<script src="jquery-2.1.1.js" type="text/javascript"></script>

<script>
var arr=[16,7,3,20,17,8];
function goujian(arr){
	var len=Math.floor(arr.length/2)-1;
	for(var i=len;i>=0;i--){
			adjust(arr,i,arr.length);
	}
}
function swap(i,j,arr){
		var temp=arr[i];
		arr[i]=arr[j];
		arr[j]=temp;
}
function adjust(arr,i,len){
		var largest=i;
		var left=i*2+1;
		var right=i*2+2;
		if(left<len&&arr[left]>arr[largest]){
				largest=left;
		}
		if(right<len&&arr[right]>arr[largest]){
				largest=right;
		}
		if(i!=largest){
				swap(i,largest,arr);
				adjust(arr,largest,len);
		}
}
function tiaozheng(arr){
		goujian(arr);
		for(var i=arr.length-1;i>0;i--){
				swap(0,i,arr);
				adjust(arr,0,i);
		}
}

tiaozheng(arr);
alert(arr);
</script>
</head>

<body>

</body>
</html>

